name: Ogawayama-CI

on: [push, pull_request]

jobs:
  Build:
    name: Build with PosgreSQL
    runs-on: [self-hosted, docker]
    timeout-minutes: 30
    container:
      image:  ghcr.io/project-tsurugi/oltp-sandbox:latest
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_PAT }}
    defaults:
      run:
        shell: bash
    env:
      BISON_DIR: /opt/bison-3.6.2
      PG_VERSION: 12.6

    steps:
      - id: Checkout
        name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.GHA_PAT }}

      - id: Setup_PostgreSQL
        name: Setup_PostgreSQL
        run: |
          if [ ! -e ./postgresql-${PG_VERSION} ]; then
            curl -sL https://ftp.postgresql.org/pub/source/v${PG_VERSION}/postgresql-${PG_VERSION}.tar.bz2 | tar -xj
          fi
          cd postgresql-${PG_VERSION}
          ./configure --prefix=${GITHUB_WORKSPACE}/.local/pgsql
          make -j8
          make install

      - id: Install_shirakami
        name: Install_shirakami
        run: |
          cd third_party/jogasaki/third_party/sharksfin/third_party/shirakami
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_sharksfin
        name: Install_sharksfin
        run: |
          cd third_party/jogasaki/third_party/sharksfin
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_FOEDUS_BRIDGE=OFF -DFORCE_INSTALL_RPATH=ON -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_fpdecimal
        name: Install_fpdecimal
        run: |
          cd third_party/jogasaki/third_party/mizugaki/third_party/yugawara/third_party/takatori/third_party/fpdecimal
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_takatori
        name: Install_takatori
        run: |
          cd third_party/jogasaki/third_party/mizugaki/third_party/yugawara/third_party/takatori
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DFORCE_INSTALL_RPATH=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_hopscotch-map
        name: Install_hopscotch-map
        run: |
          cd third_party/jogasaki/third_party/mizugaki/third_party/hopscotch-map
          mkdir -p ../../build-hopscotch-map
          cd ../../build-hopscotch-map
          rm -f CMakeCache.txt
          cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ../third_party/hopscotch-map
          cmake --build . --target install -- -j

      - id: Install_yugawara
        name: Install_yugawara
        run: |
          cd third_party/jogasaki/third_party/mizugaki/third_party/yugawara
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DFORCE_INSTALL_RPATH=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_shakujo
        name: Install_shakujo
        run: |
          cd third_party/jogasaki/third_party/mizugaki/third_party/shakujo
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_mizugaki
        name: Install_mizugaki
        run: |
          cd third_party/jogasaki/third_party/mizugaki
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DFORCE_INSTALL_RPATH=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local -DCMAKE_PREFIX_PATH="${BISON_DIR};${GITHUB_WORKSPACE}/.local" ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_performance_tools
        name: Install_performance_tools
        run: |
          cd third_party/jogasaki/third_party/performance-tools
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_jogasaki
        name: Install_jogasaki
        run: |
          cd third_party/jogasaki
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=Debug -DSHARKSFIN_IMPLEMENTATION=memory -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_manager
        name: Install_manager
        run: |
          export PATH=$PATH:${GITHUB_WORKSPACE}/.local/pgsql/bin
          cd third_party/manager
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=Debug -DFORCE_INSTALL_RPATH=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: CMake_Build
        name: CMake_Build
        run: |
          export LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/.local/pgsql/lib
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/.local -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          cmake --build . --target all --clean-first -- -j

      - id: CTest
        name: CTest
        continue-on-error: false
        env:
          GTEST_OUTPUT: xml
        run: |
          export LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/.local/pgsql/lib
          cd build
          ctest --verbose

      - id: Clang-Tidy
        name: Clang-Tidy
        run: |
          python tools/bin/run-clang-tidy.py -quiet -export-fixes=build/clang-tidy-fix.yaml -p build -extra-arg=-Wno-unknown-warning-option -header-filter=$(pwd)'/(common|server|stub)/.*\\.h$' $(pwd)'/(common|server|stub)/.*\\.cpp$' 2>&1 | tee build/clang-tidy.log

      # - id: Doxygen
      #   name: Doxygen
      #   run: |
      #     cd build
      #     make doxygen 2> >(tee doxygen-error.log)

      - id: Generate_Annotations
        name: Generate_Annotations
        uses: ./.github/actions/tsurugi-annotations-action
        if: always()

      - id: Notify_Slack
        name: Notify_Slack
        uses: ./.github/actions/tsurugi-slack-action
        if: always() && (contains(github.ref, '/tags/') || contains(github.ref, '/pull/') || contains(github.ref, '/heads/master'))
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          kind: 'job-result'
          channel: 'tsurugi-dev'
          status: ${{ job.status }}
          step_context: ${{ toJson(steps) }}
          username: ${{ github.workflow }}
