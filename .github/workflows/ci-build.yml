name: Ogawayama-CI

on: [push, pull_request, workflow_dispatch]

jobs:
  Build:
    name: Build ogawayama
    strategy:
      fail-fast: false
      matrix:
        container-tag: [ubuntu-20.04]
    runs-on: [self-hosted, docker]
    timeout-minutes: 30
    container:
      image:  ghcr.io/project-tsurugi/oltp-sandbox:${{ matrix.container-tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_PAT }}
      volumes:
        - ${{ vars.ccache_dir }}:${{ vars.ccache_dir }}
    defaults:
      run:
        shell: bash
    env:
      PG_VERSION: 12.6
      CCACHE_DIR: ${{ vars.ccache_dir }}

    steps:
      - id: Checkout
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GHA_PAT }}

      - id: Checkout_Actions
        name: Checkout_Actions
        uses: actions/checkout@v3
        with:
          repository: project-tsurugi/tsurugi-github-actions
          path: .github/actions
          ref: master
          submodules: recursive
          token: ${{ secrets.GHA_PAT }}

      - id: Checkout_Jogasaki
        name: Checkout_Jogasaki
        uses: actions/checkout@v3
        with:
          repository: project-tsurugi/jogasaki
          path: third_party/temp_jogasaki
          ref: caae5b51824ef42a7bbfc8cb10068254b9ac5b4d
          submodules: recursive
          token: ${{ secrets.GHA_PAT }}

      - id: Install_limestone
        name: Install_limestone
        run: |
          cd third_party/temp_jogasaki/third_party/tateyama/third_party/sharksfin/third_party/shirakami/third_party/limestone
          rm -rf build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_shirakami
        name: Install_shirakami
        run: |
          cd third_party/temp_jogasaki/third_party/tateyama/third_party/sharksfin/third_party/shirakami
          rm -rf build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_BENCHMARK=OFF -DBUILD_CPR=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_sharksfin
        name: Install_sharksfin
        run: |
          cd third_party/temp_jogasaki/third_party/tateyama/third_party/sharksfin
          rm -rf build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DFORCE_INSTALL_RPATH=ON -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_takatori
        name: Install_takatori
        run: |
          cd third_party/temp_jogasaki/third_party/mizugaki/third_party/yugawara/third_party/takatori
          rm -rf build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DFORCE_INSTALL_RPATH=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_hopscotch-map
        name: Install_hopscotch-map
        run: |
          cd third_party/temp_jogasaki/third_party/mizugaki/third_party/hopscotch-map
          rm -rf ../../build-hopscotch-map
          mkdir -p ../../build-hopscotch-map
          cd ../../build-hopscotch-map
          cmake -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ../third_party/hopscotch-map
          cmake --build . --target install -- -j

      - id: Install_yugawara
        name: Install_yugawara
        run: |
          cd third_party/temp_jogasaki/third_party/mizugaki/third_party/yugawara
          rm -rf build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DFORCE_INSTALL_RPATH=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_shakujo
        name: Install_shakujo
        run: |
          cd third_party/temp_jogasaki/third_party/mizugaki/third_party/shakujo
          rm -rf build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_mizugaki
        name: Install_mizugaki
        run: |
          cd third_party/temp_jogasaki/third_party/mizugaki
          rm -rf build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DFORCE_INSTALL_RPATH=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local -DCMAKE_PREFIX_PATH="${{ matrix.additional_prefix_path }};${GITHUB_WORKSPACE}/.local" ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_performance_tools
        name: Install_performance_tools
        run: |
          cd third_party/temp_jogasaki/third_party/performance-tools
          rm -rf build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_moodycamel_concurrentqueue
        name: Install_moodycamel_concurrentqueue
        run: |
          cd third_party/temp_jogasaki/third_party/concurrentqueue
          rm -rf build
          mkdir -p build_debug
          cd build_debug
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first

      - id: Install_tateyama
        name: Install_tateyama
        run: |
          cd third_party/temp_jogasaki/third_party/tateyama
          rm -rf build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DSHARKSFIN_IMPLEMENTATION=shirakami -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DFORCE_INSTALL_RPATH=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local -DCMAKE_PREFIX_PATH="${{ matrix.additional_prefix_path }};${GITHUB_WORKSPACE}/.local" ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_metadata-manager
        name: Install_metadata-manager
        run: |
          cd third_party/metadata-manager
          rm -rf build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DBUILD_TESTS=OFF -DDATA_STORAGE=json -DFORCE_INSTALL_RPATH=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_message-manager
        name: Install_message-manager
        run: |
          cd third_party/message-manager
          rm -rf build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DBUILD_TESTS=OFF -DFORCE_INSTALL_RPATH=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: Install_jogasaki
        name: Install_jogasaki
        run: |
          cd third_party/temp_jogasaki
          rm -rf build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DSHARKSFIN_IMPLEMENTATION=shirakami -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j

      - id: CMake_Build
        name: CMake_Build
        run: |
          rm -rf build
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=${{ vars.compiler_launcher }} -DSHARKSFIN_IMPLEMENTATION=shirakami -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/.local -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          cmake --build . --target install --clean-first -- -j

      - id: CTest
        name: CTest
        continue-on-error: false
        env:
          GTEST_OUTPUT: xml
        run: |
          export LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/.local/lib
          cd build
          ctest --verbose

      - id: Clang-Tidy
        name: Clang-Tidy
        run: |
          python tools/bin/run-clang-tidy.py -quiet -export-fixes=build/clang-tidy-fix.yaml -p build -extra-arg=-Wno-unknown-warning-option -header-filter=$(pwd)'/(common|server|stub/include|bridge)/.*\\.h$' $(pwd)'/(common|server|stub/src|bridge)/.*\\.cpp$' 2>&1 | tee build/clang-tidy.log
        if: matrix.container-tag != 'ubuntu-18.04'

      # - id: Doxygen
      #   name: Doxygen
      #   run: |
      #     cd build
      #     make doxygen 2> >(tee doxygen-error.log)
      #   if: matrix.container-tag != 'ubuntu-18.04'

      - id: Generate_Annotations
        name: Generate_Annotations
        uses: ./.github/actions/tsurugi-annotations-action
        if: always()
        with:
          matrix: ${{ toJson(matrix) }}

      - id: Notify_Slack
        name: Notify_Slack
        uses: ./.github/actions/tsurugi-slack-action
        if: always() && (github.event.pull_request.draft == false) && (contains(github.ref, '/tags/') || contains(github.ref, '/pull/') || contains(github.ref, '/heads/master'))
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        with:
          kind: 'job-result'
          channel: 'tsurugi-build'
          status: ${{ job.status }}
          step_context: ${{ toJson(steps) }}
          username: ${{ github.workflow }}
