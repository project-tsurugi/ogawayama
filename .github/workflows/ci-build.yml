name: Ogawayama-CI

on: [push, pull_request]

jobs:
  Build:
    runs-on: [self-hosted, oltp]
    env:
      BUILD_TYPE: ''

    steps:
      - id: Begin
        name: Begin
        run: |
          echo "Begin ${GITHUB_WORKFLOW}/${GITHUB_JOB} hostname:$(hostname)"

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - id: Install_Shirakami
        name: Install_Shirakami
        run: |
          cd third_party/umikongo/third_party/sharksfin/third_party/shirakami
          ./bootstrap.sh
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j8

      - id: Install_Shakujo
        name: Install_Shakujo
        run: |
          cd third_party/umikongo/third_party/shakujo
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DFORCE_INSTALL_RPATH=ON -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j8

      - id: Install_Sharksfin
        name: Install_Sharksfin
        run: |
          cd third_party/umikongo/third_party/sharksfin
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_FOEDUS_BRIDGE=OFF -DFORCE_INSTALL_RPATH=ON -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j8

      - id: Install_Umikongo
        name: Install_Umikongo
        run: |
          cd third_party/umikongo
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DSHARKSFIN_IMPLEMENTATION=memory -DFORCE_INSTALL_RPATH=ON -DFIXED_PAYLOAD_SIZE=ON -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          cmake --build . --target install --clean-first -- -j8

      - id: Install_Metadata_Manager
        name: Install_Metadata_Manager
        run: |
          cd third_party/manager/metadata-manager
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DFORCE_INSTALL_RPATH=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j8

      - id: CMake_Build
        name: CMake_Build
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=ON -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/.local -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          cmake --build . --target all --clean-first -- -j8

      - id: CTest
        name: CTest
        continue-on-error: false
        env:
          GTEST_OUTPUT: xml
        run: |
          cd build
          ctest --verbose

      - id: Clang-Tidy
        name: Clang-Tidy
        run: |
          python tools/bin/run-clang-tidy.py -quiet -export-fixes=build/clang-tidy-fix.yaml -p build -extra-arg=-Wno-unknown-warning-option -header-filter=$(pwd)'/(common|server|stub)/.*\\.h$' $(pwd)'/(common|server|stub)/.*\\.cpp$' 2>&1 | tee build/clang-tidy.log

      # - id: Doxygen
      #   name: Doxygen
      #   run: |
      #     cd build
      #     make doxygen 2> >(tee doxygen-error.log)
      #     zip -q -r ogawayama-doxygen doxygen/html

      # - id: Upload_Doxygen_HTML
      #   name: Upload_Doxygen_HTML
      #   uses: actions/upload-artifact@v2
      #   if: contains(github.ref, '/tags/') || contains(github.ref, '/pull/') || contains(github.ref, '/heads/master')
      #   with:
      #     name: ogawayama-doxygen
      #     path: build/ogawayama-doxygen.zip

      # - id: Gcovr
      #   name: Gcovr
      #   env:
      #     GCOVR_COMMON_OPTION: -e ../third_party/ -e ../.*/test.* -e ../.*/examples.* -e ../.local/.*
      #   run: |
      #     cd build
      #     mkdir gcovr-xml gcovr-html
      #     gcovr -j4 -r .. --xml ${GCOVR_COMMON_OPTION} -o gcovr-xml/ogawayama-gcovr.xml
      #     gcovr -j4 -r .. --html --html-details --html-title "ogawayama coverage" ${GCOVR_COMMON_OPTION} -o gcovr-html/ogawayama-gcovr.html
      #     zip -q -r ogawayama-coverage-report gcovr-html

      # - id: Upload_Gcovr_HTML
      #   name: Upload_Gcovr_HTML
      #   uses: actions/upload-artifact@v2
      #   if: contains(github.ref, '/tags/') || contains(github.ref, '/pull/') || contains(github.ref, '/heads/master')
      #   with:
      #     name: ogawayama-coverage-report
      #     path: build/ogawayama-coverage-report.zip

      # - id: Generate_Dependency_Graph
      #   name: Generate_Dependency_Graph
      #   run: |
      #     cd build
      #     cp ../cmake/CMakeGraphVizOptions.cmake .
      #     cmake --graphviz=dependency-graph/ogawayama.dot ..
      #     cd dependency-graph
      #     dot -T png ogawayama.dot -o ogawayama.png

      # - id: Upload_Dependency_Graph
      #   name: Upload_Dependency_Graph
      #   uses: actions/upload-artifact@v2
      #   if: contains(github.ref, '/tags/') || contains(github.ref, '/pull/') || contains(github.ref, '/heads/master')
      #   with:
      #     name: ogawayama-dependency-graph
      #     path: build/dependency-graph/ogawayama.png

      - id: Generate_Annotations
        name: Generate_Annotations
        uses: ./.github/actions/tsurugi-annotations-action
        if: always()
        with:
          access-token: ${{ secrets.GITHUB_TOKEN }}

      - id: Notify_Slack
        name: Notify_Slack
        uses: ./.github/actions/tsurugi-slack-action
        if: always() && (contains(github.ref, '/tags/') || contains(github.ref, '/pull/') || contains(github.ref, '/heads/master'))
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          kind: 'job-result'
          channel: 'tsurugi-dev'
          status: ${{ job.status }}
          step_context: ${{ toJson(steps) }}
          username: ${{ github.workflow }}
