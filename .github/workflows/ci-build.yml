name: Ogawayama-CI

on: [push, pull_request]

jobs:
  Build:
    runs-on: [self-hosted, oltp]
    timeout-minutes: 30
    env:
      BUILD_TYPE: ''

    steps:
      - id: Begin
        name: Begin
        run: |
          echo "Begin ${GITHUB_WORKFLOW}/${GITHUB_JOB} hostname:$(hostname)"

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - id: Install_shirakami
        name: Install_shirakami
        run: |
          cd third_party/umikongo/third_party/sharksfin/third_party/shirakami
          ./bootstrap.sh
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j8

      - id: Install_shakujo
        name: Install_shakujo
        run: |
          cd third_party/umikongo/third_party/shakujo
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DFORCE_INSTALL_RPATH=ON -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j8

      - id: Install_sharksfin
        name: Install_sharksfin
        run: |
          cd third_party/umikongo/third_party/sharksfin
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_FOEDUS_BRIDGE=OFF -DFORCE_INSTALL_RPATH=ON -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j8

      - id: Install_umikongo
        name: Install_umikongo
        run: |
          cd third_party/umikongo
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DSHARKSFIN_IMPLEMENTATION=memory -DFORCE_INSTALL_RPATH=ON -DFIXED_PAYLOAD_SIZE=ON -DBUILD_TESTS=OFF -DBUILD_DOCUMENTS=OFF -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          cmake --build . --target install --clean-first -- -j8

      - id: Install_manager
        name: Install_manager
        run: |
          cd third_party/manager
          mkdir -p build
          cd build
          rm -f CMakeCache.txt
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DFORCE_INSTALL_RPATH=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local ..
          cmake --build . --target install --clean-first -- -j8

      - id: CMake_Build
        name: CMake_Build
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/.local -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          cmake --build . --target all --clean-first -- -j8

      - id: CTest
        name: CTest
        continue-on-error: false
        env:
          GTEST_OUTPUT: xml
        run: |
          cd build
          ctest --verbose

      - id: Clang-Tidy
        name: Clang-Tidy
        run: |
          python tools/bin/run-clang-tidy.py -quiet -export-fixes=build/clang-tidy-fix.yaml -p build -extra-arg=-Wno-unknown-warning-option -header-filter=$(pwd)'/(common|server|stub)/.*\\.h$' $(pwd)'/(common|server|stub)/.*\\.cpp$' 2>&1 | tee build/clang-tidy.log

      # - id: Doxygen
      #   name: Doxygen
      #   run: |
      #     cd build
      #     make doxygen 2> >(tee doxygen-error.log)

      - id: Generate_Annotations
        name: Generate_Annotations
        uses: ./.github/actions/tsurugi-annotations-action
        if: always()
        with:
          access-token: ${{ secrets.GITHUB_TOKEN }}

      - id: Notify_Slack
        name: Notify_Slack
        uses: ./.github/actions/tsurugi-slack-action
        if: always() && (contains(github.ref, '/tags/') || contains(github.ref, '/pull/') || contains(github.ref, '/heads/master'))
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          kind: 'job-result'
          channel: 'tsurugi-dev'
          status: ${{ job.status }}
          step_context: ${{ toJson(steps) }}
          username: ${{ github.workflow }}
